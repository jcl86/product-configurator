@page "/cello"

<Title>
    <TitleText>
        Choose @currentStep.ToString()
    </TitleText>
    <SubtitleText>
        Cello
    </SubtitleText>
</Title>

<CascadingValue Value="currentStep">
    <ProgressSteps Steps="CelloStepsFactory.StepList" />
</CascadingValue>

<div class="flex flex-col md:flex-row mb-4">
    <div class="w-full md:w-2/3">
        <CascadingValue Value="currentStep">

            <Choice Items="CelloFactory.Materials"
                    OnChoiceMade="MaterialChoosen"
                    Step="CelloStepsFactory.Material" />

            <Choice Items="CelloFactory.Designs"
                    OnChoiceMade="DesignChoosen"
                    Step="CelloStepsFactory.Design" />

            @if (itemCollection.Includes(ItemType.Duplo))
            {
                <Choice Items="CelloFactory.DuploDesigns"
                        OnChoiceMade="DesignDuploChoosen"
                        Step="CelloStepsFactory.DesignColor" />
            }

            @if (itemCollection.Includes(ItemType.Milk))
            {
                <Choice Items="CelloFactory.MilkDesigns"
                        OnChoiceMade="DesignMilkChoosen"
                        Step="CelloStepsFactory.DesignColor" />
            }

            @if (itemCollection.Includes(ItemType.Diagonalink))
            {
                <Choice Items="CelloFactory.DiagonalinkDesigns"
                        OnChoiceMade="DesignDiagonalinkChoosen"
                        Step="CelloStepsFactory.DesignColor" />
            }

        </CascadingValue>

        @if (currentStep == CelloStepsFactory.End)
        {
            <div class="p-8">
                <LastStep />
            </div>
        }
    </div>
    <div class="w-full md:w-1/3">
        <CascadingValue Value="itemCollection">
            <Basket GoBackToStep="GoBack">
                <Title>
                    Selection for your case
                </Title>
            </Basket>
        </CascadingValue>

    </div>
</div>


@code {
    private Step currentStep = CelloStepsFactory.Material;

    private ItemCollection itemCollection;

    protected override void OnInitialized()
    {
        itemCollection = new ItemCollection();
    }

    private void MaterialChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);
        currentStep = CelloStepsFactory.Design;
    }

    private void DesignChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);
        currentStep = CelloStepsFactory.DesignColor;
    }

    private void DesignMilkChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);
        currentStep = CelloStepsFactory.End;
    }
    private void DesignDuploChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);
        currentStep = CelloStepsFactory.End;
    }
    private void DesignDiagonalinkChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);
        currentStep = CelloStepsFactory.End;
    }

    private void GoBack(Step step)
    {
        currentStep = step;
    }
}
