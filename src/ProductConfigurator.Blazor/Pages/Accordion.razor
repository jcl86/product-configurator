@page "/accordion"

<Title>
    <TitleText>
        Choose @currentStep.ToString()
    </TitleText>
    <SubtitleText>
        Accordion
    </SubtitleText>
</Title>



<div class="flex flex-col md:flex-row mb-4">

    <div class="w-full md:w-2/3">
        <CascadingValue Value="currentStep">

            <Choice Items="AccordionFactory.AccordionType"
                    OnChoiceMade="AccordionTypeChoosen"
                    Step="AccordionStepsFactory.AccordionType" />

            <Choice Items="AccordionFactory.CaseType"
                    OnChoiceMade="CaseTypeChoosen"
                    Step="AccordionStepsFactory.CaseType" />

            <Choice Items="AccordionFactory.Materials"
                    OnChoiceMade="MaterialChoosen"
                    Step="AccordionStepsFactory.Material" />

            <Choice Items="AccordionFactory.Finish"
                    OnChoiceMade="FinishChoosen"
                    Step="AccordionStepsFactory.Finish" />

            <Choice Items="AccordionFactory.Caps"
                    OnChoiceMade="CapsChoosen"
                    Step="AccordionStepsFactory.Caps" />

            <Choice Items="AccordionFactory.Colors"
                    OnChoiceMade="ColorChoosen"
                    Step="AccordionStepsFactory.Color" />

            <Choice Items="AccordionFactory.Designs"
                    OnChoiceMade="DesignChoosen"
                    Step="AccordionStepsFactory.Design" />

            @if (itemCollection.Includes(ItemType.Duplo))
            {
                <Choice Items="AccordionFactory.DuploDesigns"
                        OnChoiceMade="DesignDuploChoosen"
                        Step="AccordionStepsFactory.DesignColor" />
            }

            @if (itemCollection.Includes(ItemType.Milk))
            {
                <Choice Items="AccordionFactory.MilkDesigns"
                        OnChoiceMade="DesignMilkChoosen"
                        Step="AccordionStepsFactory.DesignColor" />
            }

            @if (itemCollection.Includes(ItemType.Diagonalink))
            {
                <Choice Items="AccordionFactory.DiagonalinkDesigns"
                        OnChoiceMade="DesignDiagonalinkChoosen"
                        Step="AccordionStepsFactory.DesignColor" />
            }

            <Choice Items="AccordionFactory.Accesories"
                    OnChoiceMade="OnEnd"
                    Step="AccordionStepsFactory.Accesories" />

        </CascadingValue>
    </div>
    <div class="w-full md:w-1/3">
        <CascadingValue Value="itemCollection">
            <Basket GoBackToStep="GoBack">
                <Title>
                    Selection for your case
                </Title>
            </Basket>
        </CascadingValue>
    </div>
</div>

@if (currentStep == AccordionStepsFactory.End)
{
    <p>
        Congratulations! You succeded to configure your case @($"{itemCollection.TotalWithoutVat():C}")
    </p>
    <a class="btn btn-primary">Go for it!</a>
}


@code {
    private Step currentStep = AccordionStepsFactory.AccordionType;

    private ItemCollection itemCollection;

    protected override void OnInitialized()
    {
        itemCollection = new ItemCollection();
    }

    private void AccordionTypeChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);

        if (item.IsPiano)
        {
            itemCollection.Add(AccordionFactory.NewEdition, AccordionStepsFactory.CaseType);
        }
        currentStep = AccordionStepsFactory.Material;
    }

    private void CaseTypeChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);
        currentStep = AccordionStepsFactory.Material;
    }

    private void MaterialChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);

        if (item.IsCarbon)
        {
            currentStep = AccordionStepsFactory.Finish;
        }
        else currentStep = AccordionStepsFactory.Color;
    }

    private void FinishChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);
        currentStep = AccordionStepsFactory.Design;
    }

    private void ColorChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);
        currentStep = AccordionStepsFactory.Design;
    }

    private void DesignChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);

        if (item.IsSpecialDesign)
        {
            currentStep = AccordionStepsFactory.DesignColor;
        }
        else
        {
            if (itemCollection.WasClasicEditionChoosen())
            {
                currentStep = AccordionStepsFactory.Caps;
            }
            else currentStep = AccordionStepsFactory.Accesories;
        }
    }

    private void DesignDuploChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);

        if (itemCollection.WasClasicEditionChoosen())
        {
            currentStep = AccordionStepsFactory.Caps;
        }
        else currentStep = AccordionStepsFactory.Accesories;
    }

    private void DesignMilkChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);

        if (itemCollection.WasClasicEditionChoosen())
        {
            currentStep = AccordionStepsFactory.Caps;
        }
        else currentStep = AccordionStepsFactory.Accesories;
    }

    private void DesignDiagonalinkChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);

        if (itemCollection.WasClasicEditionChoosen())
        {
            currentStep = AccordionStepsFactory.Caps;
        }
        else currentStep = AccordionStepsFactory.Accesories;
    }

    private void CapsChoosen(Item item)
    {
        itemCollection.Add(item, currentStep);
        currentStep = AccordionStepsFactory.Accesories;
    }

    private void OnEnd(Item item)
    {
        //itemCollection.Add(item, currentStep);
    }

    private void GoBack(Step step)
    {
        currentStep = step;
    }
}
