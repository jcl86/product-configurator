@if (Step == CurrentStep)
{
    <div class="min-h-full mb-8 md:mr-8 md:mb-0">
        <div class="grid grid-cols-1 gap-4">
            @foreach (var item in Items)
            {
                <a class="bg-white hover:opacity-75 cursor-pointer rounded-sm shadow flex flex-col md:flex-row p-1">
                    <div class="">
                        <div class="mx-auto md:flex-none w-52 h-52 md:relative">
                            <img src="@item.Images.ToString()" alt="@item.Name"
                                 class="md:absolute md:inset-0 w-full h-full object-contain" />
                        </div>

                        <div class="mb-3 flex justify-around">
                            @if (item.Images.HasMoreThanOneImage)
                            {
                                <button @onclick="() => item.Images.PreviousImage()"
                                        class="@(item.Images.IsFirst() ? "opacity-25" : "opacity-75")
                                  tracking-widest uppercase p-2 bg-lumasuite text-white cursor-pointer
                                rounded-full outline-none focus:outline-none hover:@(item.Images.IsFirst() ? "opacity-25" : "opacity-100")"
                                        type="button">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                                    </svg>
                                </button>


                                <span class="flex items-center justify-between space-x-1">
                                    @foreach (var i in item.Images.ImageIndexCollection)
                                    {
                                        <span class="bg-lumasuite rounded-full @(item.Images.IsIndex(i) ?
                                                                                         "opacity-100 w-3 h-3" :
                                                                                         "opacity-75 w-2 h-2")"></span>
                                    }
                                </span>

                                <button @onclick="() => item.Images.NextImage()"
                                        class="@(item.Images.IsLast() ? "opacity-25" : "opacity-75")
                                 tracking-widest uppercase p-2 bg-lumasuite text-white cursor-pointer
                                rounded-full outline-none focus:outline-none hover:@(item.Images.IsLast() ? "opacity-25" : "opacity-100")"
                                        type="button">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                    </svg>
                                </button>
                            }
                        </div>
                    </div>

                    <div class="flex-auto p-2 md:py-4 md:px-8">
                        <div class="flex flex-wrap items-baseline">
                            <h1 class="w-full flex-none text-lg md:text-3xl text-black md:mb-1.5">
                                @item.Name
                            </h1>
                            @if (item.Price > 0)
                            {
                                <div class="text-xs font-semibold md:text-lg leading-6 text-black">
                                    @item.PriceText
                                </div>
                            }
                            @*<div class="text-sm text-gray-500 ml-3">
                                    In stock
                                </div>*@
                        </div>
                        <div class="flex items-baseline mt-2 py-4 border-t border-gray-200">
                            <div class="text-sm font-light text-gray-500">
                                @item.Description
                            </div>
                        </div>
                        <div class="flex space-x-3 mb-3 text-sm font-semibold uppercase">
                            <div class="flex-auto flex space-x-3">
                                <button @onclick="() => OnChoiceMade.InvokeAsync(item)"
                                        class="tracking-widest uppercase px-4 py-2 bg-lumasuite text-white cursor-pointer rounded outline-none focus:outline-none"
                                        type="button">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z">
                                        </path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        @*<p class="text-sm text-gray-500">
                                Free shipping on all continental US orders.
                            </p>*@
                    </div>
                </a>

            }
        </div>
    </div>
}

@code {

    private int imageIndex = 0;

    [Parameter]
    public IEnumerable<Item> Items { get; set; }

    [Parameter]
    public Step Step { get; set; }

    [CascadingParameter]
    public Step CurrentStep { get; set; }

    [Parameter]
    public EventCallback<Item> OnChoiceMade { get; set; }

}
