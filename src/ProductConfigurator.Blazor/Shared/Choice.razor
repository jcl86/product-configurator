@*https://tailwindcomponents.com/component/simple-product-card-1
    https://tailwindcomponents.com/component/product-card-1*@

@if (Step == CurrentStep)
{
    <div class="bg-white min-h-full rounded-sm shadow mb-8 md:mr-8 md:mb-0">
        <div class="grid grid-cols-1 gap-4">
            @foreach (var item in Items)
            {
                <div class="flex flex-col md:flex-row p-1">
                    <div class="md:flex-none md:w-52 ms:h-52 md:relative">
                        <img src="@item.Image(Step.InstrumentType)" alt="@item.Name"
                             class="md:absolute md:inset-0 w-full h-full object-contain" />

                        <div class="md:absolute md:inset-x-0 md:bottom-0 mb-3 flex justify-around">

                            <button @onclick="() => item.PreviousImage()"
                                    class="@(item.IsFirst() ? "hidden" : "")
                                  tracking-widest uppercase p-2 bg-lumasuite text-white cursor-pointer
                                rounded-full outline-none focus:outline-none opacity-75 hover:opacity-100"
                                    type="button">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                                </svg>
                            </button>

                            @if (item.HasMoreThanOneImage)
                            {
                                <span class="flex items-center justify-between space-x-1">
                                    @foreach (var i in Enumerable.Range(0, item.Images))
                                    {
                                        <span class="bg-lumasuite w-4 h-4 rounded-full"></span>
                                    }
                                </span>
                            }

                            <button @onclick="() => item.NextImage()"
                                    class="@(item.IsLast() ? "hidden" : "")
                                 tracking-widest uppercase p-2 bg-lumasuite text-white cursor-pointer
                                rounded-full outline-none focus:outline-none opacity-75 hover:opacity-100"
                                    type="button">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                </svg>
                            </button>
                        </div>
                    </div>
                    <div class="flex-auto p-2 md:py-4 md:px-8">
                        <div class="flex flex-wrap items-baseline">
                            <h1 class="w-full flex-none text-lg md:text-3xl text-black md:mb-1.5">
                                @item.Name
                            </h1>
                            @if (item.Price > 0)
                            {
                                <div class="text-xs font-semibold md:text-lg leading-6 text-black">
                                    @item.PriceText
                                </div>
                            }
                            @*<div class="text-sm text-gray-500 ml-3">
                                    In stock
                                </div>*@
                        </div>
                        <div class="flex items-baseline mt-2 py-4 border-t border-gray-200">
                            <div class="text-sm font-light text-gray-500">
                                @item.Description
                            </div>
                        </div>
                        <div class="flex space-x-3 mb-3 text-sm font-semibold uppercase">
                            <div class="flex-auto flex space-x-3">
                                <button @onclick="() => OnChoiceMade.InvokeAsync(item)"
                                        class="tracking-widest uppercase px-4 py-2 bg-lumasuite text-white cursor-pointer rounded outline-none focus:outline-none"
                                        type="button">
                                    Add
                                </button>
                            </div>
                        </div>
                        @*<p class="text-sm text-gray-500">
                                Free shipping on all continental US orders.
                            </p>*@
                    </div>
                </div>

            }
        </div>
    </div>
}

@code {

    private int imageIndex = 0;

    [Parameter]
    public IEnumerable<Item> Items { get; set; }

    [Parameter]
    public Step Step { get; set; }

    [CascadingParameter]
    public Step CurrentStep { get; set; }

    [Parameter]
    public EventCallback<Item> OnChoiceMade { get; set; }

}
