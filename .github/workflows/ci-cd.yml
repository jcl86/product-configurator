name: CI-CD

on:
  workflow_call:
    inputs:
      web-url:
        required: true
        type: string
      app-service-name:
        required: true
        type: string
      environment:
        required: true
        type: string
    
env:
  PACKAGE_PATH: '.' 
  BUILD_CONFIG: Release
  DOTNET_VERSION: '7.0.x'

jobs:

  continuous-integration:
    environment: ${{ inputs.environment }}
    name: Continuous integration
    runs-on: ubuntu-latest
    services:
      sql-server:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          MSSQL_SA_PASSWORD: Password12!
        ports:
          - 5433:1433
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: |
        dotnet build -c $BUILD_CONFIG --no-restore

    - name: Run unit tests
      run: |
        dotnet test --no-restore --verbosity normal test/ProductConfigurator.UnitTests/ProductConfigurator.UnitTests.csproj

    - name: Run functional tests
      run: dotnet test --no-restore --verbosity normal test/ProductConfigurator.FunctionalTests/ProductConfigurator.FunctionalTests.csproj -c $BUILD_CONFIG

  deploy-api:
    environment: ${{ inputs.environment }}
    needs: [continuous-integration]
    name: Deploy api to Azure
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build src/Web/ProductConfigurator.Host/ProductConfigurator.Host.csproj -c $BUILD_CONFIG --no-restore

    - name: Publish
      run: |
        echo "App Service name - ${{ inputs.app-service-name }}"
        echo "Web url - ${{ inputs.web-url }}"
        echo "Environment - ${{ inputs.environment }}"
        dotnet publish src/Web/ProductConfigurator.Host/ProductConfigurator.Host.csproj -c $BUILD_CONFIG -o '${{ env.PACKAGE_PATH }}/app' 

    - name: Variable Substitution
      uses: microsoft/variable-substitution@v1
      with:
        files: '${{ env.PACKAGE_PATH }}/app/appsettings.json'
      env:
        ConnectionStrings.SqLite : "Data Source=productconfigurator.db"
        ConnectionStrings.SendgridApiKey : "${{ secrets.SENDGRID_API_KEY }}"
        ApiSecret : "${{ secrets.API_SECRET }}"
        UserSettings.DefaultAdministrator.Username : "${{ secrets.DEFAULT_ADMIN_USER }}"
        UserSettings.DefaultAdministrator.Password : "${{ secrets.DEFAULT_ADMIN_PASSWORD }}"
        AllowedOrigins.0 : "${{ inputs.web-url }}"

    - name: Deploy to Azure AppService
      uses: Azure/webapps-deploy@v2
      with:
        app-name:  ${{ inputs.app-service-name }}
        publish-profile: ${{ secrets.PUBLISH_PROFILE  }}
        package: '${{ env.PACKAGE_PATH }}/app'

  deploy-web:
    environment: ${{ inputs.environment }}
    needs: [continuous-integration]
    runs-on: ubuntu-latest
    name: Deploy website to Netlify
      
    steps:
      - uses: actions/checkout@main
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Build
        run: |
          dotnet restore
          dotnet build src/Web/ProductConfigurator.Client/ProductConfigurator.Client.csproj -c $BUILD_CONFIG
      - name: Publish
        run: dotnet publish src/Web/ProductConfigurator.Client/ProductConfigurator.Client.csproj -c $BUILD_CONFIG --no-build -o release
        
      - name: Publish website to Netlify
        uses: netlify/actions/cli@master
        env:
            NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
            NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        with:
            args: deploy --dir=release/wwwroot --prod
            secrets: '["NETLIFY_AUTH_TOKEN", "NETLIFY_SITE_ID"]'
